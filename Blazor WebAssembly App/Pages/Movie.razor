@page "/movie"
@using SharedModels

@inject BlazorBackendApiServices backendApiServices

<h3>Movie Details</h3>

<div class="mb-3">
    <input type="text" class="form-control" @bind="searchQuery" placeholder="Search movies..." />
    <button class="btn btn-info mt-2" @onclick="SearchMovies">
        <i class="bi bi-search me-2"></i> Search
    </button>
</div>

@if (movie == null && errorMessage == null)
{
    <p>Loading...</p>
}
else if (errorMessage != null)
{
    <p>Error: @errorMessage</p>
}
else
{
    <div>
        <h4>@movie.Title (@movie.Year)</h4>
        <p>Rated: @movie.Rated</p>
        <p>Released: @movie.Released</p>
        <p>Runtime: @movie.Runtime</p>
        <p>Genre: @movie.Genre</p>
        <p>Director: @movie.Director</p>
        <p>Writer: @movie.Writer</p>
        <p>Actors: @movie.Actors</p>
        <p>Plot: @movie.Plot</p>
        <p>Language: @movie.Language</p>
        <p>Country: @movie.Country</p>
        <p>Awards: @movie.Awards</p>
        <img src="@movie.Poster" alt="Poster" style="max-width: 300px;" />
        <h5>Ratings:</h5>
        <ul>
            @foreach (var rating in movie.Ratings)
            {
                <li>@rating.Source: @rating.Value</li>
            }
        </ul>
        <p>Metascore: @movie.Metascore</p>
        <p>IMDb Rating: @movie.ImdbRating</p>
        <p>IMDb Votes: @movie.ImdbVotes</p>
        <p>IMDb ID: @movie.ImdbID</p>
        <p>Type: @movie.Type</p>
        <p>DVD: @movie.DVD</p>
        <p>Box Office: @movie.BoxOffice</p>
        <p>Production: @movie.Production</p>
        <p>Website: @movie.Website</p>
    </div>
}
@if (searchResults != null && searchResults.Any())
{
    <h3>Search Results</h3>
    <ul>
        @foreach (var result in searchResults)
        {
            <li>@result.Title (@result.Year) <button class="btn btn-sm btn-primary" @onclick="() => LoadMovieById(result.ImdbID)">View</button></li>
        }
    </ul>
}

<h3>Last 5 Movie search history</h3>
@if (lastSearches == null)
{
    <p>Loading last 5 searches...</p>
}
else if (lastSearches.Count == 0)
{
    <p>No previous searches found.</p>
}
else
{
    <ul>
        @foreach (var lastSearch in lastSearches)
        {
            <li>
                @lastSearch
            </li>
        }
    </ul>
}

@code {
    private SharedModels.Movie movie;
    private string errorMessage;
    private List<string> lastSearches = new();
    private List<SharedModels.Movie> searchResults = new();
    private string searchQuery = string.Empty;
    private string genreFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadLastSearches();
    }

    private async Task LoadMovieById(string imdbId)
    {
        try
        {
            movie = null;
            errorMessage = null;
            movie = await backendApiServices.GetMovieByIdAsync(imdbId);
            Console.WriteLine($"Movie loaded: {movie?.Title}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load movie: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task LoadLastSearches()
    {
        try
        {
            lastSearches = await backendApiServices.GetLastApiQueriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load favorites: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task SearchMovies()
    {
        try
        {
            movie = null;
            errorMessage = null;
            searchResults = await backendApiServices.SearchMoviesAsync(searchQuery);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to search movies: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}